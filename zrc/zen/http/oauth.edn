{:ns zen.http.oauth
 :import #{zen.http zen.http.engines}

 middleware {:zen/tags #{zen/tag}}

 provider
 {:zen/tags #{zen/tag zen/schema}
  :type zen/map
  :require #{:client-id :client-secret}
  :validation-type :open
  :keys {:client-id {:type zen/string}
         :client-secret {:type zen/string}}}

 config
 {:zen/tags #{zen/tag zen/schema}
  :type zen/map
  :require #{:providers :base-uri :cookie :secret}
  :keys {:providers {:type zen/vector
                     :every {:type zen/symbol
                             :tags #{provider}}}
         :zen/binding {:type zen/symbol :tags #{zen/binding}}
         :public {:type zen/vector :every {:type zen/string}}
         ;; TODO add uri regex
         :base-uri {:type zen/string}
         :cookie {:type zen/string}
         :secret {:type zen/string}}}

 config-binding
 {:zen/tags #{zen/tag zen/binding}
  :binds config}

 index
 {:zen/tags #{zen/op zen.http/op}
  :config config-binding}

 callback
 {:zen/tags #{zen/op zen.http/op}
  :config config-binding}

 redirect
 {:zen/tags #{zen/op zen.http/op}
  :config config-binding}

 verify-jwt
 {:zen/tags #{zen.http/middleware middleware zen/op}
  :config config-binding}

 snap-config
 {:zen/tags #{zen.http/middleware middleware zen/op}
  :zen/desc "resolves references in oauth config for handlers"
  :config config-binding}

 api
 {:zen/tags #{zen.http/api zen/tag zen.http.oauth/api}
  :engine zen.http/routemap
  :mw [snap-config]
  "auth" {:GET index
          "callback" {[:provider-id] {:GET callback}}
          [:provider-id] {:GET redirect}}}}
