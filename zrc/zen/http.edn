{:ns zen.http
 :import #{zen.http.engines}

 resolve-route
 {:zen/tags #{zen/op}
  :zen/desc "Resolve route. Get request and return op, middlewares and route-params"}

 dispatch
 {:zen/tags #{zen/op}
  :zen/desc "Dispatch request to op"}

 api-engine
 {:zen/tags #{zen/tag}
  :zen/desc "API engine"}

 routemap
 {:zen/tags #{zen/schema api-engine}
  :type zen/map
  :values {:type zen/any}}

 middleware
 {:zen/tags #{zen/tag zen/schema}
  :zen/desc "Middleware tag"
  :type zen/map
  :schema-key {:key :engine}
  :keys {:engine {:type zen/symbol :tags #{zen.http.engines/middleware}}
         :mount
         {:type zen/map
          :keys {:tags {:type zen/set
                        :every {:type zen/symbol :tags #{zen/tag}}}}}}}

 op-engine
 {:zen/tags #{zen/tag zen/schema}
  :type zen/map}

 op
 {:zen/tags #{zen/tag zen/schema}
  :type zen/map
  :schema-key {:key :engine}
  :keys {:engine {:type zen/symbol :tags #{op-engine}}
         :mount {:type zen/map
                 :keys {:tags {:type zen/set
                               :every {:type zen/symbol :tags #{zen/tag}}}}}}}

 debug-middleware
 {:zen/tags #{middleware}
  :zen/desc "prints request into stdout"}

 api
 {:zen/tags #{zen/tag zen/schema}
  :zen/desc "API interface"
  :type zen/map
  :schema-key {:key :engine}
  :keys {:engine {:type zen/symbol :tags #{api-engine}}
         :middlewares {:type zen/vector
                       :every {:type zen/symbol :tags #{middleware}}}}}

 http-engine
 {:zen/tags #{zen/tag}
  :zen/desc "HTTP Server engine"}

 rpc
 {:zen/tags #{op}}

 rpc-api
 {:zen/tags #{api}
  :engine routemap
  :zen/desc "Default RPC API - POST /"
  :POST rpc}

 format
 {:zen/tags #{zen/tag zen/schema}}

 http
 {:zen/tags #{zen/tag zen/schema}
  :zen/desc "HTTP server interface"
  :type zen/map
  :require #{:port}
  :schema-key {:key :engine}
  :keys {:engine {:type zen/symbol :tags #{http-engine}}
         :port   {:type zen/integer}
         :api    {:type zen/symbol :tags #{api}}
         :formats {:type zen/set
                   :every {:type zen/symbol :tags #{format}}}}}

 ;; :defaults {ip         "0.0.0.0"
 ;;            port       8090
 ;;            thread     4
 ;;            queue-size 20480
 ;;            max-body   8388608
 ;;            max-ws     4194304
 ;;            max-line   8192
 ;;            proxy-protocol :disable
 ;;            legacy-return-value? true
 ;;            server-header "http-kit"}

 httpkit
 {:zen/tags #{zen/schema zen/engine zen.http/http-engine}
  :zen/desc "HTTP Server implementation by httpkit"
  :zen/state-key :http
  :type zen/map
  :keys
  {:httpkit
   {:type zen/map
    :keys {:ip                 {:type zen/string
                                :zen/desc "Which ip (if has many ips) to bind"}
           :thread             {:type zen/integer
                                :zen/desc "Http worker thread count"}
           :queue-size         {:type zen/integer
                                :zen/desc "Max job queued before reject to project self"}
           :max-body           {:type zen/integer
                                :zen/desc "Max http body: 8m"}
           :max-ws             {:type zen/integer
                                :zen/desc "Max websocket message size"}
           :max-line           {:type zen/integer
                                :zen/desc "Max http inital line length"}
           :proxy-protocol     {:type zen/keyword
                                :zen/desc "Proxy protocol e/o #{:disable :enable :optional}"
                                :enum [{:value :disable}
                                       {:value :enable}
                                       {:value :optional}]}}}}}

 request
 {:zen/tags #{zen/schema}
  :type zen/map
  :zen/desc "HTTP Request"
  :keys {:request-method {:type zen/keyword}
         :uri {:type zen/string}
         :headers {:type zen/map
                   :values {:type zen/any}}
         :params {:type zen/map
                  :values {:type zen/any}}
         :query-string {:type zen/string}
         :body {:type zen/any}}}

 cors
 {:zen/tags #{zen.http/middleware zen/schema}
  :engine zen.http.engines/cors}

 parse-params
 {:zen/tags #{zen.http/middleware zen/schema}
  :engine zen.http.engines/parse-params}

 cookies
 {:zen/tags #{zen.http/middleware zen/schema}
  :engine zen.http.engines/cookies}

 response-op
 {:zen/tags #{op-engine zen/schema}
  :type zen/map
  :keys {:response {:type zen/map
                    :values {:type zen/any}}
         :select {:type zen/keyword}}}}
