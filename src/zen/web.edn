{ns zen.web

 resolve-route
 {:zen/tags #{zen/op}
  :zen/desc "Resolve route. Get request and return op, middlewares and route-params"}

 dispatch
 {:zen/tags #{zen/op}
  :zen/desc "Dispatch request to op"}

 api-engine
 {:zen/tags #{zen/tag}
  :zen/desc "API engine"}

 routemap
 {:zen/tags #{zen/schema api-engine}
  :type zen/map
  :values {:type zen/any}}

 middleware-engine
 {:zen/tags #{zen/tag}
  :zen/desc "API engine"}

 middleware
 {:zen/tags #{zen/tag zen/schema}
  :zen/desc "Middleware tag"
  :type zen/map
  :schema-key {:key :engine}
  :keys {:engine {:type zen/symbol :tags #{middleware-engine}}}}

 debug-middleware
 {:zen/tags #{middleware}
  :zen/desc "prints request into stdout"}

 api
 {:zen/tags #{zen/tag zen/schema}
  :zen/desc "API interface"
  :type zen/map
  :schema-key {:key :engine}
  :keys {:engine {:type zen/symbol :tags #{api-engine}}
         :middlewares {:type zen/vector
                       :every {:type zen/symbol :tags #{middleware}}}}}

 http-engine
 {:zen/tags #{zen/tag}
  :zen/desc "HTTP Server engine"}

 http
 {:zen/tags #{zen/tag zen/schema}
  :zen/desc "HTTP server interface"
  :type zen/map
  :require #{:port}
  :keys {:engine {:type zen/symbol :tags #{http-engine}}
         :port   {:type zen/integer}
         :api    {:type zen/symbol :tags #{api}}}}

 httpkit
 {:zen/tags #{zen/schema http-engine}
  :zen/desc "HTTP Server implementation by httpkit"
  :type zen/map
  :values {:type zen/any}}


 op-engine
 {:zen/tags #{zen/tag}}

 op
 {:zen/tags #{zen/tag}}

 response-op
 {:zen/tags #{zen/tag op-engine zen/schema}
  :type zen/map
  :keys {:response {:type zen/map
                    :values {:type zen/any}}}}

 rpc
 {:zen/tags #{op}}

 rpc-api
 {:zen/tags #{api}
  :engine routemap
  :zen/desc "Default RPC API - POST /"
  :POST rpc}


 }
